Git es un software de control de versiones destribuio y decentralizado que permite un equipe de desarolladores trabajar en el mismo código.

Se denomina "districuido" por cada miembro del equipo dispone de una copia completa del código.

Los miebros del equipo pueden enviar codigos, recibirlo y desarrollar funciones de forma conjuta y separada del servidor central.

Algunas ventajes de usarlo:

* Es el estándar actual.
* Código colaborativo, versionado y destribuido.
* Recuperacion de archivos.
* Mayor control.
* Shortcuts y plugins.
* Mejora la productividad.


Lembrando que git y github no son lo mismo, git es el software de manejo de versiones y el github asi como gitlab, BitBucket etc. funciona como una plataforma social para que podemos compartilhar nuestro codigo para que otros desarrolladores lo pasa ver o copiar.



Configuración inicial

configurando Git por primera vez

git --version:
     Nos muestra la version instalada de git
git config --global user.name "Julio Serafim"
git config --global user.email juliodev26@gmail.com
git config --global user.ui true
git config --global init.defaultBranch main
git config --list 

**** asignando visual studi code como editor de configuración de git 

git config ---global core.editor "code --wait":
   Asigna studio code como editor de terminar 
git config --global -e:
     Abre configuracio de git en studio code
**** para estandarizar los saltos de lineas en windows
git config --global core.autocrlf  true
     Este comando es para estandarizar los saltos de lineas indeoendente dos sistema operativos que tenemos
**** para estandarizar los saltos de linea en linux/mac:
     los mismo comando pera para linux y mac
git config --global core.autocrlf input

**** ver todas las opcioned de la configuracion de la terminal
git config -h
     mostra todas las config de la documentacion de git en la terminal

**** ver todas las opciones de la configuracion en el navegador

git help config


Inicializar git en un directorio local 

* mkdir carpeta  = criar carpeta
* cd carpeta = aceder a la carpeta 
* touch README.md = para criar duciomento / podemos usar tambien "echo. >" en windows
* touch .gitignore = al criar este documento git sabe que todos articho o rutas en nel teven ser ignorados
* git init = para inicializar repozitorio cria  carpeta oculta de git
* code . = abre la carpeta en visual stude code.

FLUJO BASICO

El fujo de Git, consta de 3 estados locales, es decir en la computadora que se esta trabajando y uno mas de forma remota cuando accedemos al codigo centralizado en plataformas como github, gitlab y bitBucket, etc.

Dichos estados son, modified, staged, committed y remote. A cada un de ellos les corresponde una area de trabajo.

1 Working directory : Es la area que corresponde al Modified y es la carpeta local donde almacenas los archivos de tu proyecto. los directoios son las carpetas de git de nuestro projecto. todos los cambios hechos en ellas nos sera mostrado como modified en nustro working directory.

2 Staging Area: Es la area correspondiente al estado Staged tanbien se llama index por que es la area donde git indexa y agrega los cambios realizados en los archivos previos a comprometerlos en su registro. Passamos del working directory para el staged usando el comando git add

3 Local Repository: Es el area correspondiente al committed, donde los cambios ya se han registrado en el repositorio de git tanbiem se llama HEAD por que se indica en que cambio se encuentra el puntero del repositorio. Para passar del staged al committed usamos el comando git commit, eso hace el registro de los cambios en nuestro repositorio local, marcado en el historico los cabios hechos. ejemplo seria : julio ha echo un cabio a las 22:00 en tal archivos.

4 Remote Repository: Es el area correspindiente al estado remote y es el derectorio remoto donde almacenamos los archivos del proyecto en algunas plataformas como github, gitlab, bitBucket. Git denomina origin al repositorio remoto.



Comandos para git en terminal 

* agregar los cambios de un archivo al staged 
     git add archivo o directorio

* agregar todos los cambios 
     git add .

*Los cambios son comprometidos en el repositorio
debes escribir el mensaje del cambio 
cuando se abre el archivo de configuracion
al terminar guarda y cierra el archivo 

* para que los cambios tenga efecto
     git commit 
* es un Shortcut del comando anterior 
*escribir y confirmar el mensaje del cambio en un sólo paso 
     git commit -m "mensaje descriptiva del cambio"

* se agrega el origin remoto de tu repositorio de github 
     git remote add origin http://github.com/usuario/repositorio.git
* la primera vez que vinculamos el repositorio remoto con el local
     git push -u origin master
* para las subsecuentes actualizaciones, sino cambias de rama
     git push
* para descargar los cambios del repositorio remoto al local
     git pull 


    DE MASTER A MAIN 
Con los desafortunados acontecimientios del 25 de mayo de 2020  en los Estados Unidos que culminaron en el assasinado del afroamreciano George Floyd a manos de policias de la ciudad de miniapolis, se intensificó de manera global el movimiento #BlackLivesMatter.

Con dicho movimiento muchas indrustrias y empresas comenzaron a tomar acciones para erradicar el racismo.

En la insustria de la tecnologia por años se han empleado palbras como master, slave, whitelist, blacklist entre otras que actualmente no son bien vistas por el contexto y semantica que implican.

Al respecto Microsoft empres proprietaria de GitHub decidio comenzar  una campaña para reemplazar el nombre de la rama priciopal de los repositorios de master a main;

Este cambio implica agregar una par de lineas de comandos adicionales para crear la rama 'main' y hacerla principal en el repositorio.

Entosces el flujo básico quedaría de a siguiente manera:

Para repositorios nuevos
  git init 
  git add . 
  git commit -m "text de commit"
  git branch -M main
  git remote add origin https://github.com/Usuario/repositorio.git
  git push -u origin main


Para repositorios existentes 
     git branch -M main 
     git remote add origin  https://github.com/usuario/repositorio.git
     git push -u origin main

Para reemplazar la rama master por main en GitHub

 # Paso 1 
 # Crea la rama local main y pasale el historial de la rama master 
   git branch -m master main

# Paso 2
# Haz un push de la nueva rama local main en el repositorio remoto de GitHub
     git push -u origin main

# Paso 3 
# Cambia el HEAD actual a la rama main 
     git  symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main

# Paso 4 

Cambia la rama default de master a main en tu repositorio de GitHub

Para hacerlo, sigue las instrucciones de este enlace https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/changing-the-default-branch

#Paso 5
# Elimina la rama master del repositorio remoto

     git push origin --delete master 

Para reemplazar la rama master por main en git 

     git config --global ini.defaultBranch main


AYUDA DE COMANDO TERMINAL 

#ayuda en la terminal 
     git comando -h = ex: git add -h

# ayuda en el navegador 
     git help comando = git help add 



IGNORAR ARCHIVOS 

en el archivo .gitignore incluimos todo lo que NO queramos incluir en nustri repositorio. Lo podemos crear manualmente o com gitignore.io

# esto es un comentario
     archivo.ext
     carpeta 
     /archivo_desde_raiz.ext
#ignorar todos los archivos que termine en .log
     *.log

#excepto production.log
     !production.log
# ignorar los archivos terminados en .txt dentro de la carpeta doc.
# pero no en sus subcarpetas
     doc/*.txt
#ignorar todos los archivos terminados en .txt detro de la carpeta doc. y sus subcarpetas
     doc/**/*.txt

CLONAR REPOSITORIOS
     git clone url-del-repositorio-de-git.git


RAMAS 

Una rama nos permite aislar una funcionalidad de nuestro codigo que despues podremos añadir a la versión principal.

# crear rama 
     git branch nombre-rama

# cambiar  de rama 
     git checkout nombre-rama

# crear una rama y cambiarte a ella
     git checkout -b rama

# eliminar rama 
     git branch -d nombre-rama

# elimiar ramas remotas 
     git push origin --delete nombre-rama

# eliminar rama (forzado)
     git branch -D nombre-rama

# lista ramas no fusionadas a la rama actual 
     git branch --no-merged

# lista ramas fusionadas a la rama actual 
     git branch --merged

# rebasar ramas 
     git checkout rama-secundaria
     git rebase rama-principal

FUSIONES 

Une dos branch, para hacer una Fusión necesitamos:     
1. Situarnos en la branch que quedara con el contenido fusionado
2. Fusionar

Cuando se fusionan ramas se pueden dar 2 resultados diferentes:
     . Fast-Forward: La fusión se hace automatica, no hay conflitos por resolver .
     . Manual Merge: La fusión hay que hacerla manual, para resolver conflictos de duplicacion de contenidos.

# nos cambiamos a la rama principal que quedara la fusión
     git checkout rama-principal

# ejecutamos el comando merge con la rama segundaria a fusionar 
     git merge rama-segundaria


CAMBIOS 

Puedes agregar modificaciones al ultimo cambio

# sin editar el mensaje del ultimo commit
     git commit --amend --no-edit

# editando el mensaje del ultimo commit
     git commit --amend -m "nuevo mensaje para el ultimo commit"
# eliminando el ultimo commit 
     git reset --hard HEAD~1

Podemos desplazarnos en el historial del repositorio hacia atras o adelante em cambios o ramas, sin afectar el repositorio como tal

Passos 
# Cambiar a una rama 
     git checkout nombre-rama
# Cambiar a un commit en particular 
     git checkout id-commit

REGISTRO DEL HISTORIAL

git log nos permite conocer todos lo historial de un proyecto, con la informacion de la fecha el autor y el id de cada cambio

git log

# mostra en una sola linea por cambio
     git log --oneline
# guarda el log en la ruta y archivo que especifiquemos
     git log > commits.text
# muestra el historial con el formato que indicamos 
     git log --pretty=format:"%h - %ar : %s"
# cambiamos la n por por cualquer numero intero y nos mostrará los n cambios recientes
     git log -n
# muestra los cambios realizados despues de la fecha especificada
     git log  --after="2019-07-07 00:00:00"
# muestra los cambios antes de la fecha especificada
     git log --before="2019-07-07 00:00:00"
# muestra los cambios realizados en el rango de la fecha especificada
     git log --after="2019-07-07 00:00:00" --before="2019-07-07 00:00:00"
# muestra todo el registro de acciones del log 
# incluyendo inserciones, cambios, eliminaciones, fusiones, etc.
     git reflog
# diferencias entre el Working Directory y el Staging Area
     git diff