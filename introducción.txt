Git es un software de control de versiones destribuio y decentralizado que permite un equipe de desarolladores trabajar en el mismo código.

Se denomina "districuido" por cada miembro del equipo dispone de una copia completa del código.

Los miebros del equipo pueden enviar codigos, recibirlo y desarrollar funciones de forma conjuta y separada del servidor central.

Algunas ventajes de usarlo:

* Es el estándar actual.
* Código colaborativo, versionado y destribuido.
* Recuperacion de archivos.
* Mayor control.
* Shortcuts y plugins.
* Mejora la productividad.


Lembrando que git y github no son lo mismo, git es el software de manejo de versiones y el github asi como gitlab, BitBucket etc. funciona como una plataforma social para que podemos compartilhar nuestro codigo para que otros desarrolladores lo pasa ver o copiar.



Configuración inicial

configurando Git por primera vez

git --version:
     Nos muestra la version instalada de git
git config --global user.name "Julio Serafim"
git config --global user.email juliodev26@gmail.com
git config --global user.ui true
git config --global init.defaultBranch main
git config --list 

**** asignando visual studi code como editor de configuración de git 

git config ---global core.editor "code --wait":
   Asigna studio code como editor de terminar 
git config --global -e:
     Abre configuracio de git en studio code
**** para estandarizar los saltos de lineas en windows
git config --global core.autocrlf  true
     Este comando es para estandarizar los saltos de lineas indeoendente dos sistema operativos que tenemos
**** para estandarizar los saltos de linea en linux/mac:
     los mismo comando pera para linux y mac
git config --global core.autocrlf input

**** ver todas las opcioned de la configuracion de la terminal
git config -h
     mostra todas las config de la documentacion de git en la terminal

**** ver todas las opciones de la configuracion en el navegador

git help config


Inicializar git en un directorio local 

* mkdir carpeta  = criar carpeta
* cd carpeta = aceder a la carpeta 
* touch README.md = para criar duciomento / podemos usar tambien "echo. >" en windows
* touch .gitignore = al criar este documento git sabe que todos articho o rutas en nel teven ser ignorados
* git init = para inicializar repozitorio cria  carpeta oculta de git
* code . = abre la carpeta en visual stude code.

FLUJO BASICO

El fujo de Git, consta de 3 estados locales, es decir en la computadora que se esta trabajando y uno mas de forma remota cuando accedemos al codigo centralizado en plataformas como github, gitlab y bitBucket, etc.

Dichos estados son, modified, staged, committed y remote. A cada un de ellos les corresponde una area de trabajo.

1 Working directory : Es la area que corresponde al Modified y es la carpeta local donde almacenas los archivos de tu proyecto. los directoios son las carpetas de git de nuestro projecto. todos los cambios hechos en ellas nos sera mostrado como modified en nustro working directory.

2 Staging Area: Es la area correspondiente al estado Staged tanbien se llama index por que es la area donde git indexa y agrega los cambios realizados en los archivos previos a comprometerlos en su registro. Passamos del working directory para el staged usando el comando git add

3 Local Repository: Es el area correspondiente al committed, donde los cambios ya se han registrado en el repositorio de git tanbiem se llama HEAD por que se indica en que cambio se encuentra el puntero del repositorio. Para passar del staged al committed usamos el comando git commit, eso hace el registro de los cambios en nuestro repositorio local, marcado en el historico los cabios hechos. ejemplo seria : julio ha echo un cabio a las 22:00 en tal archivos.

4 Remote Repository: Es el area correspindiente al estado remote y es el derectorio remoto donde almacenamos los archivos del proyecto en algunas plataformas como github, gitlab, bitBucket. Git denomina origin al repositorio remoto.



Comandos para git en terminal 

* agregar los cambios de un archivo al staged 
     git add archivo o directorio

* agregar todos los cambios 
     git add .

*Los cambios son comprometidos en el repositorio
debes escribir el mensaje del cambio 
cuando se abre el archivo de configuracion
al terminar guarda y cierra el archivo 

* para que los cambios tenga efecto
     git commit 
* es un Shortcut del comando anterior 
*escribir y confirmar el mensaje del cambio en un sólo paso 
     git commit -m "mensaje descriptiva del cambio"

* se agrega el origin remoto de tu repositorio de github 
     git remote add origin http://github.com/usuario/repositorio.git
* la primera vez que vinculamos el repositorio remoto con el local
     git push -u origin master
* para las subsecuentes actualizaciones, sino cambias de rama
     git push
* para descargar los cambios del repositorio remoto al local
     git pull 